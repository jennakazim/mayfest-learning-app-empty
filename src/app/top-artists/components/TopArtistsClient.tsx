"use client";

import { useState } from "react";
import Image from "next/image";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { saveAs } from "file-saver";
import { createBackgroundGradient } from "@/utils/utils";
const placeHolderImage = "https://iili.io/HlHy9Yx.png";

const timeRanges = [
  { value: "short_term", label: "Last 4 Weeks" },
  { value: "medium_term", label: "Last 6 Months" },
  { value: "long_term", label: "All Time" },
];

interface Artist {
  id: string;
  name: string;
  images: { url: string }[];
  popularity: number;
}

interface TopArtistsClientProps {
  initialArtists: { items: Artist[] };
  onTimeRangeChange: (
    timeRange: "short_term" | "medium_term" | "long_term",
  ) => Promise<{ items: Artist[] }>;
}

export default function TopArtistsClient({
  initialArtists,
  onTimeRangeChange,
}: TopArtistsClientProps) {
  const [timeRange, setTimeRange] = useState("medium_term");
  const [artists, setArtists] = useState(initialArtists);
  const [isGeneratingImage, setIsGeneratingImage] = useState(false);

  const handleTimeRangeChange = async (
    value: "short_term" | "medium_term" | "long_term",
  ) => {
    setTimeRange(value);
    const newArtists = await onTimeRangeChange(value);
    setArtists(newArtists);
  };

  const generateStatsImage = () => {
    const canvas = document.createElement("canvas");
    canvas.width = 1080;
    canvas.height = 1920;
    const ctx = canvas.getContext("2d");

    if (ctx) {
      const backgroundGradient = createBackgroundGradient(
        ctx,
        canvas.width,
        canvas.height,
      );
      ctx.fillStyle = backgroundGradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      ctx.fillStyle = "white";
      ctx.roundRect(40, 200, canvas.width - 80, canvas.height - 400, 20);
      ctx.fill();
      ctx.fillStyle = "#000000";
      ctx.font = "bold 60px Arial";
      ctx.textAlign = "center";
      const range: string | undefined = timeRanges.find(
        (range) => range.value === timeRange,
      )?.label;
      ctx.fillText(`Top Artists: ${range}`, canvas.width / 2, 300);
      ctx.font = "30px Arial";
      ctx.fillStyle = "#4B5563";
      ctx.fillText(
        "Discover your most listened artists",
        canvas.width / 2,
        350,
      );
      ctx.textAlign = "left";
      ctx.fillStyle = "#000000";
      const startY = 450;
      const lineHeight = 70;

      artists.items.slice(0, 10).forEach((artist, index) => {
        const y = startY + index * lineHeight;
        ctx.font = "bold 32px Arial";
        ctx.fillText(`${index + 1}. ${artist.name}`, 80, y);

        const textWidth = ctx.measureText(`${index + 1}. ${artist.name}`).width;

        ctx.font = "24px Arial";
        const dotsStart = 100 + textWidth;
        const dotsEnd = canvas.width - 220;
        const dotSpacing = 10;
        for (let x = dotsStart; x < dotsEnd; x += dotSpacing) {
          ctx.fillText(".", x, y - 10);
        }

        ctx.font = "bold 32px Arial";
        ctx.textAlign = "right";
        ctx.fillText(`${artist.popularity}`, canvas.width - 100, y);

        ctx.textAlign = "left";
      });

      ctx.font = "24px Arial";
      ctx.textAlign = "center";
      ctx.fillStyle = "#4B5563";
      ctx.fillText(
        `Generated by Statsify â€¢ ${new Date().toLocaleDateString()}`,
        canvas.width / 2,
        canvas.height - 60,
      );
    }

    return Promise.resolve(canvas);
  };

  const downloadStats = async () => {
    try {
      setIsGeneratingImage(true);
      console.log("Starting image generation...");

      const canvas = await generateStatsImage();

      console.log("Canvas created with gradient and content");

      console.log("Converting to blob...");
      canvas.toBlob((blob) => {
        if (blob) {
          console.log("Blob created, initiating download...");
          saveAs(blob, "top-artists-stats.png");
        } else {
          console.error("Blob creation failed");
        }
      });
    } catch (error) {
      console.error("Error generating image:", error);
    } finally {
      setIsGeneratingImage(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-3xl font-bold">Your Top Artists</h1>
        <div className="flex items-center space-x-4">
          <Select
            onValueChange={handleTimeRangeChange}
            defaultValue={timeRange}
          >
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Select time range" />
            </SelectTrigger>
            <SelectContent>
              {timeRanges.map((range) => (
                <SelectItem key={range.value} value={range.value}>
                  {range.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Button onClick={downloadStats} disabled={isGeneratingImage}>
            {isGeneratingImage ? "Generating..." : "Download Stats"}
          </Button>
        </div>
      </div>

      <div className="mt-8 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
        {artists.items.map((artist) => (
          <Card key={artist.id} className="overflow-hidden">
            <CardHeader className="p-0">
              <div className="relative h-64 w-full">
                <Image
                  src={artist.images[0]?.url ?? placeHolderImage}
                  alt={artist.name}
                  layout="fill"
                  objectFit="cover"
                  className="rounded-lg"
                />
              </div>
            </CardHeader>
            <CardContent className="p-4">
              <CardTitle className="text-lg">{artist.name}</CardTitle>
              <p className="text-sm text-gray-500">
                Popularity: {artist.popularity}
              </p>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
